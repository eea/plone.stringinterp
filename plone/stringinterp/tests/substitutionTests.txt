Base Substitution Lookup Tests
==============================

Test and demonstrate looking up string substitutions
via named adapters.

Setup
-----

    >>> import re
    >>> from zope.component import getAdapter, queryAdapter
    >>> from plone.stringinterp.interfaces import IStringSubstitution
    >>> apage = self.portal['front-page']
    
    >>> apage.setSubject( ('keyword one', 'keyword two') )
    >>> apage.setContributors( ('contributor one', 'contributor two') )
    >>> apage.setLanguage( 'en' )
    >>> apage.setRights( 'copyright me' )


Negative Cases
--------------

We shouldn't get an adapter where we haven't defined one::

Object with no title

    >>> queryAdapter(self.app, IStringSubstitution, 'Title')

Non-existent substitution

    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')



Basic Content
-------------

Ask for an adapter to get the URL::

    >>> adapter = getAdapter(apage, IStringSubstitution, 'absolute_url')

    >>> adapter
    <plone.stringinterp.adapters.UrlSubstitution object at ...>

    >>> adapter()
    'http://nohost/plone/front-page'

'url' is an alias for absolute_url::

    >>> getAdapter(apage, IStringSubstitution, 'url')()
    'http://nohost/plone/front-page'



Minimal Dublin Core
-------------------

Title

    >>> getAdapter(apage, IStringSubstitution, 'title')()
    u'Welcome to Plone'


The rest of Minimal Dublin::

Description

    >>> getAdapter(apage, IStringSubstitution, 'description')()
    u'Congratulations! You have successfully installed Plone.'

Content type

    >>> getAdapter(apage, IStringSubstitution, 'type')()
    u'Page'


Let's try some non-ASCII::

   >>> apage.setTitle('Plone in EspaÃ±ol'.decode('utf8'))
   >>> getAdapter(apage, IStringSubstitution, 'title')().encode('utf8')
   'Plone in Espa\xc3\xb1ol'



Workflow Aware
--------------

Review State

    >>> getAdapter(apage, IStringSubstitution, 'review_state')()
    u'visible'



IDublinCore
-----------

Creators

    >>> getAdapter(apage, IStringSubstitution, 'creators')()
    u'portal_owner'

Contributors

    >>> getAdapter(apage, IStringSubstitution, 'contributors')()
    u'contributor one, contributor two'

Subject
    >>> getAdapter(apage, IStringSubstitution, 'subject')()
    u'keyword one, keyword two'

Keywords (alias for subject)

    >>> getAdapter(apage, IStringSubstitution, 'keywords')()
    u'keyword one, keyword two'
    
Format    

    >>> getAdapter(apage, IStringSubstitution, 'format')()
    u'text/html'

Language

    >>> getAdapter(apage, IStringSubstitution, 'language')()
    u'en'

Rights

    >>> getAdapter(apage, IStringSubstitution, 'rights')()
    u'copyright me'

Identifier

    >>> getAdapter(apage, IStringSubstitution, 'identifier')()
     u'http://nohost/plone/front-page'



ICatalogableDublinCore
----------------------

Everything should be in short local time format

Creation Date

    >>> result = getAdapter(apage, IStringSubstitution, 'created')()
    >>> re.match(r'\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$', result) is not None
    True

Effective Date

    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
    >>> re.match(r'\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$', result) is not None
    True

Expiration Date

    >>> result = getAdapter(apage, IStringSubstitution, 'expires')()
    >>> re.match(r'\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$', result) is not None
    True

Modification Date
    
    >>> result = getAdapter(apage, IStringSubstitution, 'modified')()
    >>> re.match(r'\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$', result) is not None
    True


